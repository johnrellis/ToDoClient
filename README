General Overview :

Overall, I didn't get everything implemented as I would have liked. It took me a little bit to get to grips with
the client code but can now fully appreciate the excitement around JQuery, even with my very limited JS exposure.
The concept of wrapping the HTML UI elements with backbone is also a great option.  In saying that I am happy with
the exposure to new technologies in this assignment.  Looking forward to making up the marks in the next assignment!

Here's the breakdown of what was and wasn't attempted :

Client :

Views : attempted
Models, Views, Collections : attempted
event bindings : attempted
routes : not attempted

server
in-memory store : superseded by mongodb
Database of choice : attempted, local installation of mongodb
Caching : not attempted
user auth : not attempted

X-platform :

All mobile testing was done on a Nexus S running Ice Cream Sandwich and Mobile Chrome beta.  All functions were found to
work reliably i.e. adding, removing and editing items and groups.  I had some issues with iScroll that I just ran out
of time on and didn't resolve.  It was something simple to do with DOM refreshing that I am sure I am close to fixing.
I attempted testing on iOS4 but there was some issues that I couldn't fix as I left iOS testing too late in the cycle.
Overall I am moderately happy with how it runs on mobile chrome but I have a bit to learn on getting cross platform
functionality working. I am used to the write once, run (almost) everywhere that Google Web Toolkit provides.

Functionality :
replicate to-do list : attempted
settings page : not attempted
list of lists : attempted using list dividers to represent categories.  Not sure if this fulfills this requirement.
Geo location : attempted using google maps v2 geocoding, works in testing

Here is a brief overview of how the pieces of the server and client fit together :

Server Architecture :

Web Server :
nginx : nginx is used as the front end web server.  A backup of its configuration is in the conf directory.
It is a pretty standard set up except that it was set up to run on port 81 to avoid conflicts on windows 7, this was
achieved by setting the http.server.listen property to 81.  Secondly, all calls to the root /api are proxied to a node.js
server via "proxy_pass http://127.0.0.1:8180/api/;"

node.js : node.js is used to create a rest api that uses mongodb as its datasource.  To start the node.js server, simply
run node lib/db-server.js.  It sets up a server on port 8180 that nginx proxies to. The rest api is contained within db-rest-api.js.
common.js contains the configuration for the node.js server such as the required modules and any useful application wide functions.
There are two modules used :
connect : http server framework https://github.com/senchalabs/Connect
mongodb : a low level api for connecting to mongo-db https://github.com/christkv/node-mongodb-native

mongodb : mongodb handles the persistence.  By default mongodb runs on port 27017 and db-server.js is set up to connect to this port.
The database name is "johnrellis" and the collection is "todo-john-rellis", the connection to the collection is cached in db-rest-api.js.
The current "schema" is text, done, created, group for each todo document. mongodb is queried via the create, update, read, list and del
of exports.rest in db-rest-api.js.

Client Architecture :

The client side code is made up of john-todo.css, john-todo.js and index.html

john-todo.js :
    Wraps all the UI elements in index.html using backbone.js.  Event binding is used to bind models and view together.
    backbone.js comes bundled with underscore that provides handy utility methods and also the ability to extend objects.
    There are two namespaces, app and bb that help to reduce namespace collisions and also allows access to the app object
    from anywhere in the client JS.  The code is dotted with TODO's and comments to explain wants and functionality.
    Underscore templates are used to render the items text but should probably be expanded to list dividers and the options of
    the groups dropdown.


index.html :

JQuery mobile is used to create mobile friendly views, backbone.js is used to wrap these views.

The main components of index.html are :

div data-role="header" : wrapped by bb.view.Head

    Shows the status of the app, the number of to do items and contains an add and cancel button

div id='new-item' : wrapped by bb.view.NewItem

    Allows you to add new to do items and new groups, it is shown by the add button in the header

ul id="list" data-role="listview" : wrapped by bb.view.List

    A JQuery mobile list that contains the todo items broken up into groups using list dividers.




